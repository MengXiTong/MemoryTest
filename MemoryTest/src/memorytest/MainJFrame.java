/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memorytest;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 *
 * @author yujian
 */
public class MainJFrame extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        addButton();
        initAction();
        //初始化是初级难度
        primary();
    }
    
    //添加30个按钮
    private void addButton(){
        GridLayout gridLayout = new GridLayout(5,6);
        pan.setLayout(gridLayout);
        pan.setBounds(20, 10, 690, 470);
        for(int i=0;i<array.length;i++){
            jbtn[i]=new JButton();
            jbtn[i].setSize(115,95);
            pan.add(jbtn[i]);
        }
        this.add(pan);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jlblCue = new javax.swing.JLabel();
        jlblTime = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu = new javax.swing.JMenu();
        jmiPrimary = new javax.swing.JMenuItem();
        jmiIntermediate = new javax.swing.JMenuItem();
        jmiSenior = new javax.swing.JMenuItem();
        jmiPrimaryRanking = new javax.swing.JMenuItem();
        jmiIntermediateRanking = new javax.swing.JMenuItem();
        jmiSeniorRanking = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlblCue.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jlblCue.setForeground(new java.awt.Color(255, 0, 0));
        jlblCue.setText("提示栏");
        jlblCue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255)));

        jlblTime.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jlblTime.setForeground(new java.awt.Color(255, 0, 51));
        jlblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTime.setText("点击任意方块开始测试");
        jlblTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 255)));

        jMenu.setText("记忆力测试");
        jMenu.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jmiPrimary.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiPrimary.setText("初级");
        jMenu.add(jmiPrimary);

        jmiIntermediate.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiIntermediate.setText("中级");
        jmiIntermediate.setToolTipText("");
        jMenu.add(jmiIntermediate);

        jmiSenior.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiSenior.setText("高级");
        jMenu.add(jmiSenior);

        jmiPrimaryRanking.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiPrimaryRanking.setText("初级排行榜");
        jMenu.add(jmiPrimaryRanking);

        jmiIntermediateRanking.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiIntermediateRanking.setText("中级排行榜");
        jMenu.add(jmiIntermediateRanking);

        jmiSeniorRanking.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jmiSeniorRanking.setText("高级排行榜");
        jmiSeniorRanking.setToolTipText("");
        jMenu.add(jmiSeniorRanking);

        jMenuBar1.add(jMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlblCue, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(jlblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(519, Short.MAX_VALUE)
                .addComponent(jlblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlblCue, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainJFrame mainJFrame = new MainJFrame();
                mainJFrame.setLocationRelativeTo(null);
                mainJFrame.setVisible(true);
            }
        });
    }
    
    //设置监听事件
    private void initAction(){
        jmiPrimary.addActionListener(this);
        jmiIntermediate.addActionListener(this);
        jmiSenior.addActionListener(this);
        for(int i=0;i<array.length;i++){
           jbtn[i].addActionListener(this);
        }
        jmiPrimaryRanking.addActionListener(this);
        jmiIntermediateRanking.addActionListener(this);
        jmiSeniorRanking.addActionListener(this);
    }
    
    //初级难度
    public void primary(){
        difficulty=0;
        count = 6;
        initValue();
        jlblCue.setText("初级：您需要连续找出6个相同图标的方块");
        achieveRandom(6,1);
        achieveRandom(6,2);
        achieveRandom(6,3);
        achieveRandom(6,4);
        achieveRemain(5);
    }
    
    //中级难度
    public void intermediate(){
        difficulty=1;
        count = 10;
        initValue();
        jlblCue.setText("中级：您需要连续找出10个相同图标的方块");
        achieveRandom(10,3);
        achieveRandom(10,4);
        achieveRemain(5);
    }
    
    //高级难度
    public void senior(){
        difficulty=2;
        count = 15;
        initValue();
        jlblCue.setText("高级：您需要连续找出15个相同图标的方块");
        achieveRandom(15,1);
        achieveRemain(2);
    }

    //每次测试初始化的值
    public void initValue(){
        lastValue = 0;
        array = new int[30];
        cleanImage();
        btnlist.clear();
        if(timer!=null){
            timer.cancel();
        }
        jlblTime.setText("点击任意方块开始测试");
    }
    
    //随机填充array数组num个值，每个值为value
    private void achieveRandom(int num,int value){
        while(num>0){
            int i = (int)(Math.random()*30);
            if(array[i]==0){
                array[i] = value;
                num--;
            }
        }
    }
    
    //将array数组剩下的未赋值的项填充值value
    private void achieveRemain(int value){
        for(int i=0;i<array.length;i++){
            if(array[i]==0){
                array[i] = value;
            }
        }
    }
    
    //根据array数组对应索引的值来显示图片
    private ImageIcon showImage(int index){
        ImageIcon imageIcon = new ImageIcon();
        switch(array[index]){
            case 1:
                imageIcon = new ImageIcon(getClass().getResource("/image/1.png"));
                break;
            case 2:
                imageIcon = new ImageIcon(getClass().getResource("/image/2.png"));
                break;
            case 3:
                imageIcon = new ImageIcon(getClass().getResource("/image/3.png"));
                break;
            case 4:
                imageIcon = new ImageIcon(getClass().getResource("/image/4.png"));
                break;
            case 5:
                imageIcon = new ImageIcon(getClass().getResource("/image/5.png"));
                break;
            default:
                break;
        }
        return imageIcon;
    }
    
    //清除按钮上的图片
    private void cleanImage(){
        for(int i=0;i<array.length;i++){
           jbtn[i].setIcon(null);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel jlblCue;
    private javax.swing.JLabel jlblTime;
    private javax.swing.JMenuItem jmiIntermediate;
    private javax.swing.JMenuItem jmiIntermediateRanking;
    private javax.swing.JMenuItem jmiPrimary;
    private javax.swing.JMenuItem jmiPrimaryRanking;
    private javax.swing.JMenuItem jmiSenior;
    private javax.swing.JMenuItem jmiSeniorRanking;
    // End of variables declaration//GEN-END:variables
    private final JPanel pan = new JPanel();
    private final JButton[] jbtn = new JButton[30];
    private int[] array = new int[30];
    private int lastValue = 0;  //记录上一个点出来的图案
    private List<JButton> btnlist = new LinkedList<>(); //记录点出来的jButton
    private Timer timer;
    private int intTime = 0;       //记录时间（秒）
    private int difficulty = 0;    //记录难度0-初级，1-中级，2-高级
    private int count = 6;         //根据难度来找出相应下同图案的个数。
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==jmiPrimary){
            primary();
            return;
        }
        if(e.getSource()==jmiIntermediate){
            intermediate();
            return;
        }
        if(e.getSource()==jmiSenior){
            senior();
            return;
        }
        //防止点击出现图案的按钮上也触发事件
        for(int i=0;i<btnlist.size();i++){
            if(e.getSource()==btnlist.get(i)){
                return;
            }
        }
        for(int i=0;i<array.length;i++){
            if(e.getSource()==jbtn[i]){
                jbtnAction(i);
                return;
            }
        }
        if(e.getSource()==jmiPrimaryRanking){
            RankingJFrame rankingJFrame = new RankingJFrame(0);
            rankingJFrame.setVisible(true);
            rankingJFrame.setLocationRelativeTo(this);
            rankingJFrame.setTitle("记忆测试排行榜：初级记忆排行榜.txt");
        }
        if(e.getSource()==jmiIntermediateRanking){
            RankingJFrame rankingJFrame = new RankingJFrame(1);
            rankingJFrame.setVisible(true);
            rankingJFrame.setLocationRelativeTo(this);
            rankingJFrame.setTitle("记忆测试排行榜：中级记忆排行榜.txt");
        }
        if(e.getSource()==jmiSeniorRanking){
            RankingJFrame rankingJFrame = new RankingJFrame(2);
            rankingJFrame.setVisible(true);
            rankingJFrame.setLocationRelativeTo(this);
            rankingJFrame.setTitle("记忆测试排行榜：高级记忆排行榜.txt");
        }
    }
    
    //jbtn的响应事件内所要执行的内容
    private void jbtnAction(int i){
        if(lastValue == 0){    //判断点击的按钮是否是本次测试第一个点击的按钮
            System.out.println("点击的按钮是本次测试第一个点击的按钮");
            intTime=0;
            timer = new Timer();
            TimerTask task = new TimerTask(){
                @Override
                public void run() {
                    intTime++;
                    jlblTime.setText("您用时："+intTime+"秒");
                }

            };
            timer.schedule(task, 1000, 1000);
        }
        else{
            if(lastValue != array[i]){ //判断本次点击的按钮和上次点击的按钮是否是同一种动物图案
                cleanImage();
                btnlist.clear();
            } 
        }
        lastValue = array[i];
        jbtn[i].setIcon(showImage(i));
        btnlist.add(jbtn[i]);
        if(btnlist.size()==count){
            System.out.println("恭喜你成功了");
            System.out.println("共用时"+intTime+"秒");
            timer.cancel();
            Ranking ranking = new Ranking();
            ranking.setDifficulty(difficulty);
            ranking.setScore(intTime);
            RecordJFrame recordJFrame = new RecordJFrame(ranking,this);
            recordJFrame.setLocationRelativeTo(this);
            recordJFrame.setVisible(true);
        }
    }
}
